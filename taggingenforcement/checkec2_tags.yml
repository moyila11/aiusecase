---
- name: Check EC2 tags (report-only) -- run from control node
  hosts: localhost
  gather_facts: false
  vars:
    aws_region: "us-east-1"
    required_tags:
      owner: "platform-team"
      environment: "production"
      cost_center: "CC1234"

  tasks:
    # - name: Ensure AWS CLI is available on control node
    #   ansible.builtin.command: aws --version
    #   register: aws_cli_check
    #   ignore_errors: yes
    #   changed_when: false

    # - name: Fail early if AWS CLI missing on control node
    #   ansible.builtin.fail:
    #     msg: "AWS CLI not found on control node. Install it (pip install awscli or package) or run this play from a machine with aws configured."
    #   when: aws_cli_check.rc != 0

    - name: Describe instances by instance-id (for hosts that have ec2_instance_id)
      ansible.builtin.command: >
        aws ec2 describe-instances
        --region {{ aws_region }}
        --instance-ids {{ hostvars[item].ec2_instance_id }}
        --output json
        --query "Reservations[].Instances[]"
      loop: "{{ groups['all'] }}"
      loop_control:
        label: "{{ item }}"
      when: hostvars[item].ec2_instance_id is defined
      register: describe_by_id
      changed_when: false

    - name: Process describe-by-id results (report)
      vars:
        result_list: "{{ describe_by_id.results | default([]) }}"
      ansible.builtin.debug:
        msg: >-
          Host={{ item.item }}
          Instance={{ ((item.stdout | default('[]') | from_json)[0].InstanceId) | default('unknown') }}
          Missing={{ (required_tags.keys() | difference(((item.stdout | default('[]') | from_json)[0].Tags | default([])) | map(attribute='Key') | list)) | list }}
          Current={{ dict( ((item.stdout | default('[]') | from_json)[0].Tags | default([])) | map(attribute='Key') | list | zip( ((item.stdout | default('[]') | from_json)[0].Tags | default([])) | map(attribute='Value') | list ) ) | default({}) }}
      loop: "{{ result_list }}"
      when: result_list | length > 0

    - name: Describe instances by private IP (for hosts that have ec2_private_ip and no ec2_instance_id)
      ansible.builtin.command: >
        aws ec2 describe-instances
        --region {{ aws_region }}
        --filters "Name=private-ip-address,Values={{ hostvars[item].ec2_private_ip }}"
        --output json
        --query "Reservations[].Instances[]"
      loop: "{{ groups['all'] }}"
      loop_control:
        label: "{{ item }}"
      when:
        - hostvars[item].ec2_instance_id is not defined
        - hostvars[item].ec2_private_ip is defined
      register: describe_by_ip
      changed_when: false

    - name: Process describe-by-ip results (report)
      vars:
        result_list: "{{ describe_by_ip.results | default([]) }}"
      ansible.builtin.debug:
        msg: >-
          Host={{ item.item }}
          Instance={{ ((item.stdout | default('[]') | from_json)[0].InstanceId) | default('unknown') }}
          Missing={{ (required_tags.keys() | difference(((item.stdout | default('[]') | from_json)[0].Tags | default([])) | map(attribute='Key') | list)) | list }}
          Current={{ dict( ((item.stdout | default('[]') | from_json)[0].Tags | default([])) | map(attribute='Key') | list | zip( ((item.stdout | default('[]') | from_json)[0].Tags | default([])) | map(attribute='Value') | list ) ) | default({}) }}
      loop: "{{ result_list }}"
      when: result_list | length > 0

    - name: Report hosts missing both ec2_instance_id and ec2_private_ip
      ansible.builtin.debug:
        msg: "Host={{ item }} : missing both ec2_instance_id and ec2_private_ip in inventory/host_vars. Add one of them so we can look up the instance."
      loop: "{{ groups['all'] | reject('match','^$') | list }}"
      when:
        - hostvars[item].ec2_instance_id is not defined
        - hostvars[item].ec2_private_ip is not defined
